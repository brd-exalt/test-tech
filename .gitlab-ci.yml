stages:
  - build
  - deploy

variables:
  DOCKER_IMAGE_FRONT: "tistax/frontend"
  DOCKER_IMAGE_BACKEND: "tistax/backend"
  HELM_RELEASE_NAME: "my-app"

# Étape 1: Build et push de l'image frontend avec Kaniko
build_front:
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  stage: build
  script:
    # Kaniko requiert un fichier JSON pour l'authentification Docker Hub
    - cp "$CI_PROJECT_DIR.tmp/DOCKER_AUTH" /kaniko/.docker/config.json
    # Build et push l'image frontend
    - |
      /kaniko/executor \
        --context $CI_PROJECT_DIR/front \
        --dockerfile $CI_PROJECT_DIR/front/Dockerfile \
        --destination $DOCKER_IMAGE_FRONT:$CI_COMMIT_TAG \
        --ignore-path=/product_uuid 
  only:
    - tags

# Étape 2: Build et push de l'image backend avec Kaniko
build_back:
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  stage: build
  script:
    # Kaniko requiert un fichier JSON pour l'authentification Docker Hub
    - cp "$CI_PROJECT_DIR.tmp/DOCKER_AUTH" /kaniko/.docker/config.json
    # Build et push l'image backend
    - |
      /kaniko/executor \
        --context $CI_PROJECT_DIR/back \
        --dockerfile $CI_PROJECT_DIR/back/Dockerfile \
        --destination $DOCKER_IMAGE_BACKEND:$CI_COMMIT_TAG \
        --ignore-path=/product_uuid \
  only:
    - tags

# Étape 3: Déploiement avec Helm sur Kubernetes
deploy:
  stage: deploy
  image: 
    name: alpine/helm:3.16.1
    entrypoint: [""]
  script:
    # Configurer Kubernetes
    - mkdir -p /root/.kube/
    - cp "$CI_PROJECT_DIR.tmp/KUBECONFIG" /root/.kube/config
    # Installer ou mettre à jour le release Helm
    - |
      helm upgrade $HELM_RELEASE_NAME helm/ \
        --namespace $HELM_RELEASE_NAME \
        --install \
        --create-namespace \
        --set frontend.image="$DOCKER_IMAGE_FRONT:$CI_COMMIT_TAG" \
        --set backend.image="$DOCKER_IMAGE_BACKEND:$CI_COMMIT_TAG" \
        --set backend.env.postgresUsername="$SPRING_POSTGRES_USERNAME" \
        --set backend.env.postgresPassword="$SPRING_POSTGRES_PASSWORD" \
        --set backend.env.postgresUrl="$SPRING_POSTGRES_URL"
  only:
    - tags
